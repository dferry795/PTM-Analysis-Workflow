---
title: "Step2Code"
format: html
editor: visual
---

Welcome! This is an R quarto document, which functions similarly to a markdown. Below you can see code chunks. If you press the green triangle in the top right of the code chunk, it will run just that chunk. Be sure to edit sections of the code where it says to, such as pathways to data in your computer, or selecting for genes to plot in ggplot.

Follow the instructions below to follow how we did our project.

# [Part 1: Setting up the data and joining them together.]{.underline}

## First, read the csv files from your local environment. Edit this part if necessary and include the path to these files as downloaded on github.

```{r}
# load required packages. If these are not already in your R environment, call these two lines to install them
# install.packages("tidyverse")

install.packages("readxl") # may need to install this one regardless

library(tidyverse)
library(dplyr)
library(stringr)
library(readxl)


# EDIT HERE: Insert absolute path to files
disruption = read_csv("data/PTM_Disrupting_Mutations.csv", show_col_types = FALSE) %>% suppressWarnings()

# EDIT HERE: Insert absolute path to files, and it selects the columns needed
frequent_mutations = read_tsv("data/TCGA_Frequent_Mutations.tsv", show_col_types = FALSE) %>% 
  select(dna_change, protein_change, 
         num_cohort_ssm_affected_cases,
         num_cohort_ssm_cases,
         cohort_ssm_affected_cases_percentage)

# EDIT HERE: Insert absolute path to Uniprot ID file
ids = read_excel("data/idmap.xlsx") %>%
  rename(gene = symbol) %>%
  rename(UniProt = query) %>%
  select(UniProt, gene)
```

## Second, we need to fix the columns in the frequent mutational data and separate the columns.

```{r}
# extract gene name and mutation info
frequent_mutations = frequent_mutations %>%
          separate(protein_change, 
                   into = c("gene", "mutation"), 
                   sep = " ", fill = "right") %>%
          drop_na() %>%
          mutate(exact_position = as.integer(str_extract(mutation, "\\d+")))
```

## Third, we need to attach the IDs to the frequent mutational data frame so we can later do a join, and set up the PTM disruption data to match

```{r}
ids_unique <- ids %>% distinct(gene, .keep_all = TRUE)

frequent_mutations <- frequent_mutations %>%
  inner_join(ids_unique, by = "gene")

# now set up disruption data to match...
disruption <- disruption %>%
  separate_rows(MutationSite, sep = ";") %>%  # Split MutationSite into multiple rows
  mutate(exact_position = as.integer(str_extract(MutationSite, "\\d+"))) %>%
  distinct(UniProt, Position, exact_position, .keep_all = TRUE) 
```

## Lastly, Join the data frames together!

```{r}
disruption_clean <- disruption %>% distinct(UniProt, exact_position, .keep_all = TRUE)
frequent_mutations_clean <- frequent_mutations %>% distinct(UniProt, exact_position, .keep_all = TRUE)

Joined_Data <- disruption_clean %>%
  inner_join(frequent_mutations_clean, by = c("UniProt", "exact_position")) %>%
  select(dna_change, UniProt, Position, MutationSite, exact_position,
         gene, num_cohort_ssm_affected_cases, num_cohort_ssm_cases,
         cohort_ssm_affected_cases_percentage, Source, Disease,
         Is_experimental_verification) %>%
  arrange(desc(cohort_ssm_affected_cases_percentage)) %>%
  distinct(gene, Position, exact_position, .keep_all = TRUE) %>%
  rename(affected_cases_percentage = "cohort_ssm_affected_cases_percentage") %>%
  rename(PTM_Position = "Position")

#remove unneeded dataframes
rm(ids, frequent_mutations_clean, disruption_clean, ids_unique)
```

Now our [**Joined_Data**]{.underline} variable stores the joined PTM disrupting and frequent mutation data! You can view it if you want to see what it looks like by clicking it on the right under your environment, or calling:

```{r}
view(Joined_Data)
```

If you would like to write out your data set to your computer, run the following code and edit the path to where you would like to write it out

```{r}
write.table(Joined_Data, "data/Mutation_Frequency_Count.tsv", sep = "\t", row.names = FALSE, quote = FALSE) # EDIT HERE: define the path you want to write out the data for.
```

The columns in this data frame show you what change was made to the DNA, what position the PTM is on, and what exact_position the mutation is on. Additionally, there is the percentage of frequency and where the data came from in the PTMD database.

# [Part 2: Plotting the data]{.underline}

Now we can use ggplot to visually assess some selected for proteins. Our team spent a lot of time manually visualizing tens of different genes in this data frame with this code. We were looking for proteins which had unique normal distributions, or an uneven spike of mutations at some regions. The highest frequency mutations were of interest to us, and we further studied them in the Chimera software as well as in intrinsically disordered region analysis.

In the code below, edit it and put in the following genes to see our same plots:

**"TP53"**

**"POLE"**

**"KRAS"**

**"CTNNB1"**

**"SF3B1"**

**"SPECC1"**

-   Additionally, you can view the **Joined_Data** data frame and plot any gene you like for fun as listed in the "gene" column. After running this code chunk, a variable called "filtered_data" is also created where you can view the mutation frequency data for just that gene. "filtered_data" was useful for our team in future steps when we mapped these proteins in the Chimera software and explored where in 3-dimensional space the mutational hot spots were.

```{r}
library(ggplot2)
library(dplyr)

# EDIT HERE: Select a specific gene
selected_gene <- "TP53" # EDIT HERE: CHANGE GENE HERE to whatever you want


# first - look at frequency of just unique mutations!! Filter data for the chosen gene
filtered_data <- Joined_Data %>%
  filter(gene == selected_gene) 

PTM_positions = unique(filtered_data$Position)

filtered_data = filtered_data %>%
  distinct(exact_position, .keep_all = TRUE)

# Convert PTM_positions into a data frame
PTM_positions_df <- data.frame(xintercept = PTM_positions)

# Plot mutation versus frequency
ggplot(filtered_data, aes(x = exact_position, 
                          y = affected_cases_percentage / 100)) +
  geom_bar(stat = "identity", fill = "darkblue", color = "darkblue") +
  labs(
    title = paste0(selected_gene, " Cancer Mutation Frequency by Position"),
    x = "Mutation Position",
    y = "Frequency of Mutation"
  ) +
  theme_minimal()
```

Congrats! Now you have joined the data frame to produce the most frequent (across all cancer types) PTM disrupting mutations, and selected those 6 proteins of most interest to us. You can now also see visually what the mutations looks like across the linear genome of that protein.
