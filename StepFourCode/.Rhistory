# add dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
library(jsonlite)
library(httr)
library(httr2)
library(rlang)
library(glue)
### REPLACE VALUES BELOW WITH UNIPROT IDS ###
UniProt_IDs = c('P01116', 'Q07864', 'O75533', 'P35222', 'Q5M775')
# initialize dataframe
predictions <- tibble(
UniProt = character(),
AIUPred = list()
)
# get disorder predictions for each gene from AIUPred
for (id in UniProt_IDs) {
data <- list(accession = tolower(id), smoothing = "default", analysis_type = "binding")
url <- "https://aiupred.elte.hu/rest_api"
response <- GET(url, query = data)
content <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(content)
print(parsed_data$AIUPred)
predictions <- predictions %>%
add_row(UniProt = parsed_data$accession, AIUPred = list(parsed_data$AIUPred))
}
head(predictions)
# get gene names for proteins of interest
gene_names = c()
for (id in UniProt_IDs) {
base_url <- glue("https://rest.uniprot.org/uniprotkb/{toupper(id)}")
params <- list(
fields = "gene_names"
)
req <- request(base_url)
req |> req_headers(
accept = "application/json"
)
req |> req_url_query(!!!params)
resp <- req_perform(req)
if (resp_status(resp) != 200) {
stop(sprintf("Error %d: %s", resp_status(resp), resp_body_string(resp)))
}
data <- resp_body_json(resp)
print(data$genes[[1]]$geneName$value)
gene_names <- c(gene_names, data$genes[[1]]$geneName$value)
}
print(gene_names)
# add gene names to dataframe
predictions <- predictions %>%
mutate(Gene = gene_names)
head(predictions)
# reformat dataframe
final_df <- data.frame()
for (id in unique(predictions$UniProt)) {
filtered_df <- predictions %>%
filter(UniProt == id) %>%
unnest(AIUPred) %>%
mutate(Position = row_number()) %>%
mutate(Disordered = AIUPred > 0.5)
final_df <- bind_rows(final_df, filtered_df)
}
print(head(final_df))
# The graphs are not displayed, but they will show up in your Downloads
for (gene in gene_names) {
# filter dataframe
gene_df <- final_df %>%
filter(Gene == gene)
# plot figure
ggplot(gene_df, aes(x = Position, y = AIUPred)) +
geom_line(color = "darkblue", size = 0.5) +
labs(
title = glue("{gene} Disorder Prediction"),
x = "Amino Acid Position", y = "AIUPred Disorder Prediction"
) +
theme_bw()
# download the graph
ggsave(glue("{gene}_Disorder_Prediction.png"))
print("Successfully downloaded " + glue("{gene}_Disorder_Prediction.png"))
}
### REPLACE WITH GENE NAME ###
gene_to_graph <- 'KRAS'
# filter dataframe
gene_df <- final_df %>%
filter(Gene == gene_to_graph)
# plot figure
ggplot(gene_df, aes(x = Position, y = AIUPred)) +
geom_line(color = "darkblue", size = 0.5) +
ylim(0, 1.0) +
labs(
title = glue("{gene_to_graph} Disorder Prediction"),
x = "Amino Acid Position", y = "AIUPred Disorder Prediction"
) +
theme_minimal()
# download the graph
ggsave(glue("{gene_to_graph}_Disorder_Prediction.png"))
print("Successfully downloaded " + glue("{gene_to_graph}_Disorder_Prediction.png"))
### REPLACE WITH GENE NAME ###
gene_to_graph <- 'KRAS'
### REPLACE WITH PTM POSITIONS OF INTEREST ###
PTM_positions <- c(32, 64)
### REPLACE WITH AMINO ACID RANGE TO ZOOM IN ON ###
coordinates_of_figure <- c(0, 75)
# filter dataframe
gene_df <- final_df %>%
filter(Gene == gene_to_graph)
# plot figure
ggplot(gene_df, aes(x = Position, y = AIUPred)) +
geom_line(color = "darkblue", size = 0.5) +
ylim(0, 1.0) +
labs(
title = glue("{gene_to_graph} Disorder Prediction"),
x = "Amino Acid Position", y = "AIUPred Disorder Prediction"
) +
theme_minimal() +
# zoom in on specific areas of the protein
coord_cartesian(xlim = coordinates_of_figure) +
# plot PTM sites
geom_vline(xintercept = PTM_positions, linetype = "dashed", color = "red", size = 0.5) +
annotate("text", x = PTM_positions[1],
y = 0.8,
label = "PTM Site", color = "red", angle = 90, vjust = -1, hjust = 1, size = 3)
# download the graph
ggsave(glue("{gene_to_graph}_Disorder_Prediction_Zoom.png"))
print("Successfully downloaded " + glue("{gene_to_graph}_Disorder_Prediction_Zoom.png"))
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/output/Mutation_Freuency_Count.csv")
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/output/Mutation_Freuency_Count.csv")
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/output/Mutation_Freuency_Count.csv")
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO DISPROT VERIFIED IDRS FILE ###
disorder_df = read_tsv('/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/data/DisProt_release_2024_12.tsv')
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/output/Mutation_Freuency_Count.csv")
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/Data/TCGA Data/Mutation_Freuency_Count.csv")
### INSERT PATH TO DISPROT VERIFIED IDRS FILE ###
disorder_df = read_tsv('/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/data/DisProt_release_2024_12.tsv')
### REPLACE WITH GENE NAME TO PLOT ###
gene_name = 'KRAS'
Mutation_PTM_Frequency %>%
mutate(affected_cases_percentage = affected_cases_percentage / 100) -> Mutation_PTM_Frequency
head(Mutation_PTM_Frequency)
mutation_freq <- Mutation_PTM_Frequency %>%
filter(gene == gene_name)
head(mutation_freq)
# package dependencies
library(tidyverse)
library(ggplot2)
library(glue)
### INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE ###
### you should have gotten this data frame from running StepTwoCode.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/Data/TCGA Data/Mutation_Freuency_Count.csv")
### INSERT PATH TO DISPROT VERIFIED IDRS FILE ###
disorder_df = read_tsv('/Users/tessabass/Desktop/capstone/PTM-Analysis-Workflow/data/DisProt_release_2024_12.tsv')
### REPLACE WITH GENE NAME TO PLOT ###
gene_name = 'KRAS'
Mutation_PTM_Frequency %>%
mutate(affected_cases_percentage = affected_cases_percentage / 100) -> Mutation_PTM_Frequency
head(Mutation_PTM_Frequency)
mutation_freq <- Mutation_PTM_Frequency %>%
filter(gene == gene_name)
head(mutation_freq)
gene_disorder <- disorder_df %>%
filter(acc == mutation_freq$'UniProt'[1])
if (length(gene_disorder) == 0) {
print(glue('There is no DisProt data for {gene_name}. We advise you to use one of the predictive AIUPred pipelines instead of this one.'))
} else {
head(gene_disorder)
}
mutations <- pull(mutation_freq, 'exact_position')
is_disordered <- sapply(mutations, function(pos) {
any(pos >= gene_disorder$start & pos <= gene_disorder$end)
})
mutation_freq <- mutation_freq %>%
mutate(Disordered = is_disordered)
head(mutation_freq)
### THIS IS A PLOT OF PTM-DISRUPTING MUTATION FREQUENCY, COLORED BY DISORDER DATA FROM DISPROT ###
### REPLACE WITH SPECIFIC X and Y-AXIS RANGES TO ZOOM IN ON ###
amino_acid_range = c(0, 80)
mutation_frequency_range = c(0, 0.006)
# Plot mutation versus frequency
ggplot(mutation_freq, aes(x = exact_position,
y = affected_cases_percentage,
fill = Disordered)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("FALSE" = "steelblue", "TRUE" = "tomato")) +
labs(
title = glue("{gene_name} Mutation Frequency by Position"),
x = "Mutation Position",
y = "Frequency of Mutation",
fill = "Within an IDR"
) +
theme_bw() +
coord_cartesian(xlim = amino_acid_range, ylim = mutation_frequency_range)
### THIS IS THE SAME PLOT, BUT YOU CAN SELECT SPECIFIC PTM SITES TO SHOW ###
### REPLACE WITH SPECIFIC PTM-SITES TO DISPLAY ###
ptm_sites = c(32, 64)
### REPLACE WITH SPECIFIC X and Y-AXIS RANGES TO ZOOM IN ON ###
amino_acid_range = c(0, 80)
mutation_frequency_range = c(0, 0.006)
# Plot mutation versus frequency
ggplot(mutation_freq, aes(x = exact_position,
y = affected_cases_percentage,
fill = Disordered)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("FALSE" = "steelblue", "TRUE" = "tomato")) +
labs(
title = glue("{gene_name} Mutation Frequency by Position"),
x = "Mutation Position",
y = "Frequency of Mutation",
fill = "Within an IDR"
) +
theme_bw() +
coord_cartesian(xlim = amino_acid_range, ylim = mutation_frequency_range) +
geom_vline(xintercept = ptm_sites, linetype = "dashed", color = "black", size = 0.5) +
annotate("text", x = ptm_sites, y = max(mutation_freq$affected_cases_percentage) * 0.9,
label = "PTM Site", color = "black", angle = 90, vjust = -0.5, hjust = 1, size = 3)
# package dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
library(jsonlite)
library(httr)
library(httr2)
library(rlang)
library(glue)
# INSERT PATH TO MUTATION_FREQUENCY_COUNT.CSV HERE
### you should have gotten this from running Step2Code.qmd ###
Mutation_PTM_Frequency = read_csv("/Users/tessabass/Desktop/capstone/Data/TCGA Data/Mutation_Freuency_Count.csv")
### REPLACE VALUES BELOW WITH UNIPROT IDS ###
gene_names = c('KRAS', 'POLE', 'SF3B1', 'CTNNB1', 'SPECC1')
head(Mutation_PTM_Frequency)
UniProt_IDs <- c()
for (gene in gene_names) {
mini_df <- Mutation_PTM_Frequency[Mutation_PTM_Frequency$gene == gene, ]
UniProt_IDs <- c(UniProt_IDs, mini_df$UniProt[1])
}
print(UniProt_IDs)
Mutation_PTM_Frequency %>%
mutate(affected_cases_percentage = affected_cases_percentage / 100) -> Mutation_PTM_Frequency
# initialize dataframe
predictions <- tibble(
UniProt = character(),
AIUPred = list()
)
# get disorder predictions for each gene from AIUPred
for (id in UniProt_IDs) {
data <- list(accession = tolower(id), smoothing = "default", analysis_type = "binding")
url <- "https://aiupred.elte.hu/rest_api"
response <- GET(url, query = data)
content <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(content)
print(parsed_data$AIUPred)
predictions <- predictions %>%
add_row(UniProt = parsed_data$accession, AIUPred = list(parsed_data$AIUPred))
}
head(predictions)
df_expanded <- predictions %>%
unnest(AIUPred) %>%
group_by(UniProt) %>%
mutate(Position = row_number()) %>%
ungroup()
head(df_expanded)
df_expanded %>%
mutate(Disordered = AIUPred > 0.5) -> df_expanded
head(df_expanded)
Mutation_PTM_Frequency <- Mutation_PTM_Frequency %>%
mutate(Position = exact_position)
combined <- right_join(Mutation_PTM_Frequency, df_expanded, by = c("UniProt", "Position"))
head(combined)
for (gene_to_plot in gene_names) {
# Filter data for the chosen gene
filtered_data <- combined %>%
filter(gene == gene_to_plot) %>%
distinct(Position, .keep_all = TRUE)
gene_df <- df_expanded %>%
filter(UniProt == filtered_data$UniProt[1])
# Plot the data
ggplot(data = filtered_data) +
geom_bar(aes(x = Position, y = affected_cases_percentage, fill = Disordered),
stat = "identity") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red"), name = "Within an IDR") +
geom_line(data = gene_df, aes(x = Position, y = AIUPred * max(filtered_data$affected_cases_percentage),
color = "Prediction Confidence", group = 1), size = 0.25) +
scale_color_manual(values = c("Prediction Confidence" = "black"), name = "Disorder Prediction") +
scale_y_continuous(
name = "Frequency of Mutation",
sec.axis = sec_axis(~ . / max(filtered_data$affected_cases_percentage),
name = "AIUPred Disorder Score")
) +
labs(
title = glue("{selected_gene} Mutation Frequency by Position"),
x = "Mutation Position"
) +
theme_bw()
# Save the plot
ggsave(glue("{gene_to_plot}_AIUPred_and_Mutation_Frequency.png"), width = 12, height = 6, units = "in")
print(glue("{gene_to_plot}_AIUPred_and_Mutation_Frequency.png successfully downloaded"))
}
for (gene_to_plot in gene_names) {
# Filter data for the chosen gene
filtered_data <- combined %>%
filter(gene == gene_to_plot) %>%
distinct(Position, .keep_all = TRUE)
gene_df <- df_expanded %>%
filter(UniProt == filtered_data$UniProt[1])
# Plot the data
ggplot(data = filtered_data) +
geom_bar(aes(x = Position, y = affected_cases_percentage, fill = Disordered),
stat = "identity") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red"), name = "Within an IDR") +
geom_line(data = gene_df, aes(x = Position, y = AIUPred * max(filtered_data$affected_cases_percentage),
color = "Prediction Confidence", group = 1), size = 0.25) +
scale_color_manual(values = c("Prediction Confidence" = "black"), name = "Disorder Prediction") +
scale_y_continuous(
name = "Frequency of Mutation",
sec.axis = sec_axis(~ . / max(filtered_data$affected_cases_percentage),
name = "AIUPred Disorder Score")
) +
labs(
title = glue("{gene_to_plot} Mutation Frequency by Position"),
x = "Mutation Position"
) +
theme_bw()
# Save the plot
ggsave(glue("{gene_to_plot}_AIUPred_and_Mutation_Frequency.png"), width = 12, height = 6, units = "in")
print(glue("{gene_to_plot}_AIUPred_and_Mutation_Frequency.png successfully downloaded"))
}
### REPLACE ONE OF THE GENES YOU SELECTED PREVIOUSLY THAT YOU WOULD LIKE TO TAKE A CLOSER LOOK AT ###
selected_gene <- 'POLE'
### REPLACE WITH SPECIFIC PTM-SITES TO DISPLAY ###
ptm_sites = c(425)
### REPLACE WITH A SPECIFIC X-AXIS RANGE OF AMINO ACIDS TO ZOOM IN ON ###
amino_acid_range = c(200, 500)
# Filter data for the chosen gene
filtered_data <- combined %>%
filter(gene == selected_gene) %>%
distinct(Position, .keep_all = TRUE)
gene_df <- df_expanded %>%
filter(UniProt == filtered_data$UniProt[1])
# Plot data
ggplot(data = filtered_data) +
geom_bar(aes(x = Position, y = affected_cases_percentage, fill = Disordered),
stat = "identity") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red"), name = "Disordered Region") +
geom_line(data = gene_df, aes(x = Position, y = AIUPred * max(filtered_data$affected_cases_percentage),
color = "Prediction Confidence", group = 1), size = 0.25) +
scale_color_manual(values = c("Prediction Confidence" = "black"), name = "Disorder Prediction") +
scale_y_continuous(
name = "Frequency of Mutation",
sec.axis = sec_axis(~ . / max(filtered_data$affected_cases_percentage),
name = "AIUPred Disorder Score")
) +
labs(
title = glue("{selected_gene} Mutation Frequency by Position"),
x = "Mutation Position"
) +
theme_bw() +
coord_cartesian(xlim = amino_acid_range) +
geom_vline(xintercept = ptm_sites, linetype = "dashed", color = "black", size = 0.25) +
annotate("text", x = ptm_sites,
y = max(filtered_data$affected_cases_percentage) * 0.8,
label = "PTM Site", color = "black", angle = 90, vjust = -1, hjust = 1, size = 2.5)
# Save the plot
ggsave("plot.png", width = 12, height = 6, units = "in")
